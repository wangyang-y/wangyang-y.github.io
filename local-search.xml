<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>test02</title>
    <link href="/2020/06/04/test02/"/>
    <url>/2020/06/04/test02/</url>
    
    <content type="html"><![CDATA[<img src="/2020/06/04/test02/Blog\source\_posts\test02\Snipaste_2020-06-04_10-20-09.png" srcset="/img/loading.gif" style="zoom:75%;"><img src="/2020/06/04/test02/06/04/test02/Snipaste_2020-06-04_10-20-09.png" srcset="/img/loading.gif" class title="This is an example image">]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>test 图片</title>
    <link href="/2020/06/04/test-%E5%9B%BE%E7%89%87/"/>
    <url>/2020/06/04/test-%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p><img src="/2020/06/04/test-%E5%9B%BE%E7%89%87/E:%5CBlog%5Csource_posts%5Ctest-%E5%9B%BE%E7%89%87%5CSnipaste_2020-06-04_10-06-52.jpg" srcset="/img/loading.gif" alt></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Spring Boot完整笔记</title>
    <link href="/2020/06/04/Spring-Boot%E5%AE%8C%E6%95%B4%E7%AC%94%E8%AE%B0/"/>
    <url>/2020/06/04/Spring-Boot%E5%AE%8C%E6%95%B4%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="一、Spring-Boot-入门"><a href="#一、Spring-Boot-入门" class="headerlink" title="一、Spring Boot 入门"></a>一、Spring Boot 入门</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><blockquote><p>Spring Boot来简化Spring应用开发的框架</p><p>整个Spring技术栈的一个大整合</p><p>J2EE开发的一站式解决方案</p></blockquote><h2 id="2、微服务"><a href="#2、微服务" class="headerlink" title="2、微服务"></a>2、微服务</h2><p>微服务：一种架构风格</p><p>一个应用应该是一组小型服务；可以通过HTTP的方法是进行互通；</p><p>每一个功能元素最终都是一个可独立替换和独立升级的软禁单元；</p><h2 id="3、Hello-World"><a href="#3、Hello-World" class="headerlink" title="3、Hello World"></a>3、Hello World</h2><p>浏览器发送hello请求，服务器接收请求并处理，响应Hello World字符串。</p><h3 id="1、创建一个maven工程"><a href="#1、创建一个maven工程" class="headerlink" title="1、创建一个maven工程"></a>1、创建一个maven工程</h3><h3 id="2、导入Spring相关依赖"><a href="#2、导入Spring相关依赖" class="headerlink" title="2、导入Spring相关依赖"></a>2、导入Spring相关依赖</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>                <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span></code></pre></div><h3 id="3、编写一个主程序，启动Spring应用"><a href="#3、编写一个主程序，启动Spring应用" class="headerlink" title="3、编写一个主程序，启动Spring应用"></a>3、编写一个主程序，启动Spring应用</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">//来标注一个主程序类，表示这是一个Spring Boot的应用</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//Spring 应用启动起来</span>        SpringApplication.run(Application<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">args</span>)</span>;    &#125;&#125;</code></pre></div><h3 id="4、编写相关的Controller、Service"><a href="#4、编写相关的Controller、Service" class="headerlink" title="4、编写相关的Controller、Service"></a>4、编写相关的Controller、Service</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RestController</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HelloController</span> </span>&#123;    <span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/hello"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">Hello</span><span class="hljs-params">()</span></span>&#123;        <span class="hljs-keyword">return</span> <span class="hljs-string">"Hello Spring Boot"</span>;    &#125;&#125;</code></pre></div><h3 id="5、运行主程序测试"><a href="#5、运行主程序测试" class="headerlink" title="5、运行主程序测试"></a>5、运行主程序测试</h3><h3 id="6、简化部署"><a href="#6、简化部署" class="headerlink" title="6、简化部署"></a>6、简化部署</h3><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--简化部署，这个插件可以将应用打包成一个可执行的jar包--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">build</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">plugin</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-maven-plugin<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">plugin</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">plugins</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">build</span>&gt;</span></code></pre></div><h2 id="4、Hello-World-分析"><a href="#4、Hello-World-分析" class="headerlink" title="4、Hello World 分析"></a>4、Hello World 分析</h2><h3 id="1、POM"><a href="#1、POM" class="headerlink" title="1、POM"></a>1、POM</h3><h4 id="1、父项目"><a href="#1、父项目" class="headerlink" title="1、父项目"></a>1、父项目</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>     <span class="hljs-tag">&lt;<span class="hljs-name">relativePath</span>/&gt;</span> <span class="hljs-comment">&lt;!-- lookup parent from repository --&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span></code></pre></div><blockquote><p>​    上面的项目的父项目</p></blockquote><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">parent</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-dependencies<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>2.3.0.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">parent</span>&gt;</span>在这个项目里面真正管理了Spring Boot应用的所有依赖版本</code></pre></div><blockquote><p>Spring Boot的版本仲裁中心</p><p>以后我们导入项目默认是不需要写版本号的，当然没有在dependencies中管理的依赖还是需要声明版本号的</p></blockquote><h4 id="2、导入的依赖，启动器"><a href="#2、导入的依赖，启动器" class="headerlink" title="2、导入的依赖，启动器"></a>2、导入的依赖，启动器</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p><strong>Spring-boot-starter-web</strong></p><p>​        spirng-boot-starter ：spring-boot场景启动器；帮我们导入了web模块正常运行所需要的依赖组件</p><p> Spring Boot将所有的功能场景都抽取出来了，做成了一个个的starter(启动器)，只需要在项目里引入这些starter相关场景的所有依赖都会导入进来。要用什么功能就导入什么场景的启动器。</p><h3 id="2、主程序类、主入口类"><a href="#2、主程序类、主入口类" class="headerlink" title="2、主程序类、主入口类"></a>2、主程序类、主入口类</h3><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@SpringBootApplication</span>  <span class="hljs-comment">//来标注一个主程序类，表示这是一个Spring Boot的应用</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> </span>&#123;    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;        <span class="hljs-comment">//Spring 应用启动起来</span>        SpringApplication.run(Application<span class="hljs-class">.<span class="hljs-keyword">class</span>,<span class="hljs-title">args</span>)</span>;    &#125;&#125;</code></pre></div><p><code>@SpringBootApplication</code> : SpringBootApplication标注在某个类上面，就表示这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动Spring应用 </p><h2 id="5、使用Spring-Initializer快速创建Spring-Boot项目"><a href="#5、使用Spring-Initializer快速创建Spring-Boot项目" class="headerlink" title="5、使用Spring Initializer快速创建Spring Boot项目"></a>5、使用Spring Initializer快速创建Spring Boot项目</h2><h1 id="二、Spring-Boot-配置"><a href="#二、Spring-Boot-配置" class="headerlink" title="二、Spring Boot 配置"></a>二、Spring Boot 配置</h1><h2 id="1、配置文件"><a href="#1、配置文件" class="headerlink" title="1、配置文件"></a>1、配置文件</h2><blockquote><p>SpringBoot 使用一个全局的配置文件，配置文件的名是固定的</p></blockquote><p><code>application.properties</code></p><p><code>application.yml</code></p><p>配置文件的作用：修改SpringBoot自动配置的默认值；</p><p>YAML（YANL Ain’t Markup Languge）</p><p>标记语言</p><p>​        以前的配置文件；大多都使用的是 xxx.xml文件；</p><p>​        YAML ：以数据为中心，比json,xml等更加合适做配置文件</p><p>YAML:</p><div class="hljs"><pre><code class="hljs xml">server:  port: 8003</code></pre></div><p>XML:</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">server</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">port</span>&gt;</span>        8003    <span class="hljs-tag">&lt;/<span class="hljs-name">port</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">server</span>&gt;</span></code></pre></div><h2 id="2、YAML基本语法"><a href="#2、YAML基本语法" class="headerlink" title="2、YAML基本语法"></a>2、YAML基本语法</h2><h3 id="1、基本语法"><a href="#1、基本语法" class="headerlink" title="1、基本语法"></a>1、基本语法</h3><p>k: （空格)v ：表示一对键值对（空格必须有）</p><p>一<strong>空格</strong>的缩进来控制层级关系；只要是左对其的一列数据，都是同一个层级</p><div class="hljs"><pre><code class="hljs xml">serverport: 8081path: /hello</code></pre></div><p><code>属性和值也是大小写敏感的</code></p><h3 id="2、指的写法"><a href="#2、指的写法" class="headerlink" title="2、指的写法"></a>2、指的写法</h3><p><strong>字面量 : 普通的值（数字，字符串，布尔）</strong></p><p>​        k:v ：字面直接来写；</p><p>​                字符串默认不用加上单引号或者双引号</p><p>​                “” : 双引号；会转义转义字符串里面的特殊字符</p><p>​                                name:    “wangyang\n lisi”    输出 wangyang 换行 lisi</p><p>​                ‘’：单引号；不会转义字符串里面的特殊字符，会原样输出字符串中的内容</p><p>​                                name:    “wangyang\n lisi”    输出 wangyang\n lisi</p><p><strong>对象、Map(属性和值) (键值对)</strong></p><p>​        k:    v ： 在下一行来写对象的属性和值的关系；注意缩进</p><p>​                对象还是K : v的方式</p><div class="hljs"><pre><code class="hljs xml">student: name: zhangsanage: 20</code></pre></div><p><strong>行内写法：</strong></p><div class="hljs"><pre><code class="hljs xml">student: &#123;name: zhangsan,age: 20&#125;</code></pre></div><p><strong>数组（List、Set）</strong>    </p><p>值表示数组中的一个元素</p><div class="hljs"><pre><code class="hljs yml"><span class="hljs-attr">pets:</span>  <span class="hljs-bullet">-</span> <span class="hljs-string">cat</span><span class="hljs-bullet">-</span> <span class="hljs-string">dog</span><span class="hljs-bullet">-</span> <span class="hljs-string">pig</span></code></pre></div><p>行内写法</p><div class="hljs"><pre><code class="hljs yml"><span class="hljs-attr">pets:</span> <span class="hljs-string">[cat,dog,pig]</span></code></pre></div><h3 id="3、配置文件值注入"><a href="#3、配置文件值注入" class="headerlink" title="3、配置文件值注入"></a>3、配置文件值注入</h3><p>配置文件</p><div class="hljs"><pre><code class="hljs yml"><span class="hljs-attr">person:</span>  <span class="hljs-attr">name:</span> <span class="hljs-string">wangyang</span>  <span class="hljs-attr">age:</span> <span class="hljs-number">18</span>  <span class="hljs-attr">salary:</span> <span class="hljs-number">20000</span>  <span class="hljs-attr">map:</span>    <span class="hljs-attr">k1:</span> <span class="hljs-string">v1</span>    <span class="hljs-attr">k2:</span> <span class="hljs-string">v2</span>  <span class="hljs-attr">list:</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">a</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">b</span>    <span class="hljs-bullet">-</span> <span class="hljs-string">c</span>  <span class="hljs-attr">dog:</span>    <span class="hljs-attr">name:</span> <span class="hljs-string">hehe</span>    <span class="hljs-attr">age:</span> <span class="hljs-number">3</span></code></pre></div><p>JavaBean</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>   <span class="hljs-comment">//只有这个类是容器中的组件才可以使用容器提供的ConfigurationProperties功能</span><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)  <span class="hljs-comment">//告诉springboot 将本类中的所有属性和配置文件中相关的配置进行绑定</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> salary;    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;    <span class="hljs-keyword">private</span> List list;    <span class="hljs-keyword">private</span>  Dog dog;        ...getter setter&#125;</code></pre></div><p>可以导入一个配置文件处理器，以后编写配置文件就会有提示了</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--导入配置文件处理器，配置文件进行绑定就会有提示--&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-configuration-processor<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h4 id="1、properties配置文件在idea中默认utf-8可能会乱码"><a href="#1、properties配置文件在idea中默认utf-8可能会乱码" class="headerlink" title="1、properties配置文件在idea中默认utf-8可能会乱码"></a>1、properties配置文件在idea中默认utf-8可能会乱码</h4><h4 id="2、-value和ConfigurationProperties获取值比较、Environment"><a href="#2、-value和ConfigurationProperties获取值比较、Environment" class="headerlink" title="2、@value和ConfigurationProperties获取值比较、Environment"></a>2、@value和ConfigurationProperties获取值比较、Environment</h4><p><strong>@value获取配置文件中的值</strong>(简单类型的数据绑定)</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;person.name&#125;"</span>)<span class="hljs-keyword">private</span> String name;<span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;person.age&#125;"</span>)<span class="hljs-keyword">private</span> Integer age;<span class="hljs-meta">@Value</span>(<span class="hljs-string">"$&#123;person.salary&#125;"</span>) <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> salary;</code></pre></div><p><strong>@ConfigurationProperties获取属性值，（批量注入配置文件中的属性）</strong></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>   <span class="hljs-comment">//只有这个类是容器中的组件才可以使用容器提供的ConfigurationProperties功能</span><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)  <span class="hljs-comment">//告诉springboot 将本类中的所有属性和配置文件中相关的配置进行绑定</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> salary;    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;    <span class="hljs-keyword">private</span> List list;    <span class="hljs-keyword">private</span>  Dog dog;        ...getter setter&#125;</code></pre></div><table><thead><tr><th align="center"></th><th align="center">@ConfigUrationProperties</th><th align="center">@value</th></tr></thead><tbody><tr><td align="center">功能</td><td align="center">批量注入配置文件中的属性</td><td align="center">一个一个注入</td></tr><tr><td align="center">松散绑定</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center">SqEl</td><td align="center">不支持</td><td align="center">支持</td></tr><tr><td align="center">JSR303数据校验</td><td align="center">支持</td><td align="center">不支持</td></tr><tr><td align="center"></td><td align="center">支持</td><td align="center">不支持</td></tr></tbody></table><blockquote><p>如果是在业务逻辑中只需要获取一下配置文件中某项的值那么就使用@Value</p><p>如果我们专门编写了一个javabean来和配置文件映射，我们就直接使用@ConfigurationProperties</p></blockquote><h4 id="3、配置文件注入值校验"><a href="#3、配置文件注入值校验" class="headerlink" title="3、配置文件注入值校验"></a>3、配置文件注入值校验</h4><p><code>使用@ConfigurationProperties获取配置文件值，并校验@Validated写在需要校验的属性上</code></p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Component</span><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)<span class="hljs-meta">@Validated</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span> </span>&#123;   <span class="hljs-comment">//lastName必须是邮箱格式</span>    <span class="hljs-meta">@Email</span>    <span class="hljs-comment">//@Value("$&#123;person.last-name&#125;")</span>    <span class="hljs-keyword">private</span> String lastName;    <span class="hljs-comment">//@Value("#&#123;11*2&#125;")</span>    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-comment">//@Value("true")</span>    <span class="hljs-keyword">private</span> Boolean boss;    <span class="hljs-keyword">private</span> Date birth;    <span class="hljs-keyword">private</span> Map&lt;String,Object&gt; maps;    <span class="hljs-keyword">private</span> List&lt;Object&gt; lists;    <span class="hljs-keyword">private</span> Dog dog;</code></pre></div><h4 id="4、-PropertySource-amp-ImportSource"><a href="#4、-PropertySource-amp-ImportSource" class="headerlink" title="4、@PropertySource &amp;@ImportSource"></a>4、@PropertySource &amp;@ImportSource</h4><p><strong>@PropertiesSource</strong> : 加载指定的配置文件</p><blockquote><p><strong>@PropertiesSource</strong> 只能对properties 配置文件进行数据绑定**</p></blockquote><div class="hljs"><pre><code class="hljs prop"># person对象person.name&#x3D;wangyangperson.age&#x3D;18person.salary&#x3D;20000person.map.k1&#x3D;v1person.map.k2&#x3D;v2person.list&#x3D;a,b,cperson.dog.name&#x3D;heheperson.dog.age&#x3D;3</code></pre></div><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@PropertySource</span>(value = <span class="hljs-string">"classpath:person.properties"</span>)<span class="hljs-meta">@Controller</span>   <span class="hljs-comment">//只有这个类是容器中的组件才可以使用容器提供的ConfigurationProperties功能</span><span class="hljs-meta">@ConfigurationProperties</span>(prefix = <span class="hljs-string">"person"</span>)  <span class="hljs-comment">//告诉springboot 将本类中的所有属性和配置文件中相关的配置进行绑定</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Person</span></span>&#123;    <span class="hljs-keyword">private</span> String name;    <span class="hljs-keyword">private</span> Integer age;    <span class="hljs-keyword">private</span> <span class="hljs-keyword">double</span> salary;    <span class="hljs-keyword">private</span> Map&lt;String,String&gt; map;    <span class="hljs-keyword">private</span> List list;    <span class="hljs-keyword">private</span>  Dog dog;</code></pre></div><p><strong>@ImportSource</strong> :   导入Spring的配置文件，让配置文件内容生效；</p><blockquote><p>Spring Boot里面没有Spring的配置文件，我们自己编写的配置文件，也不能自动识别</p><p>需要在主配置类上添加@ImportSource 导入我们编写的Spring的配置类，才能让它生效</p></blockquote><p>Spring Boot 推荐的给容器中添加组件的方式，使用全注解的方式</p><p><code>配置类 === 配置文件</code></p><p>@Configuration 用来表示当前类就是一个配置类</p><p>使用@Bean给容器中添加组件（将方法的返回值添加到容器中，容器中这个组件默认的id就是方法名）</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">/**</span><span class="hljs-comment"> * <span class="hljs-doctag">@Configuration</span> : 用来标记 该类是个配置类</span><span class="hljs-comment"> * <span class="hljs-doctag">@Bean</span> : 将方法的返回值，作为bean对象，添加到容器中，方法名就是Bean对象在容器中的id</span><span class="hljs-comment"> */</span><span class="hljs-meta">@Configuration</span><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyAppConfig</span> </span>&#123;    <span class="hljs-meta">@Bean</span>    <span class="hljs-function"><span class="hljs-keyword">public</span> HelloService <span class="hljs-title">helloService</span><span class="hljs-params">()</span></span>&#123;        System.out.println(<span class="hljs-string">"配置类@Bean给容器中添加组件"</span>);        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> HelloService();    &#125;&#125;</code></pre></div><h3 id="4、配置文件占位符"><a href="#4、配置文件占位符" class="headerlink" title="4、配置文件占位符"></a>4、配置文件占位符</h3><h4 id="4-1-随机数"><a href="#4-1-随机数" class="headerlink" title="4.1 随机数"></a>4.1 随机数</h4><div class="hljs"><pre><code class="hljs java">$&#123;random.value&#125;、$&#123;random.<span class="hljs-keyword">int</span>&#125;、$&#123;random.<span class="hljs-keyword">long</span>&#125;$&#123;random.<span class="hljs-keyword">int</span>(<span class="hljs-number">10</span>)&#125;、$&#123;random.<span class="hljs-keyword">int</span>[<span class="hljs-number">1024</span>,<span class="hljs-number">65536</span>]&#125;</code></pre></div><h4 id="4-2-占位符获取之前配置的值，如果没有可以通过-：-指定默认值"><a href="#4-2-占位符获取之前配置的值，如果没有可以通过-：-指定默认值" class="headerlink" title="4.2 占位符获取之前配置的值，如果没有可以通过 ： 指定默认值"></a>4.2 占位符获取之前配置的值，如果没有可以通过 ： 指定默认值</h4><div class="hljs"><pre><code class="hljs properties"><span class="hljs-meta">person.name</span>=<span class="hljs-string">wangyang$&#123;random.int&#125;</span><span class="hljs-meta">person.age</span>=<span class="hljs-string">18</span><span class="hljs-meta">person.salary</span>=<span class="hljs-string">20000</span><span class="hljs-meta">person.map.k1</span>=<span class="hljs-string">v1</span><span class="hljs-meta">person.map.k2</span>=<span class="hljs-string">v2</span><span class="hljs-meta">person.list</span>=<span class="hljs-string">a,b,c</span><span class="hljs-meta">person.dog.name</span>=<span class="hljs-string">$&#123;person.name:wang&#125;_hehe</span><span class="hljs-meta">person.dog.age</span>=<span class="hljs-string">3</span></code></pre></div><h3 id="5、profile"><a href="#5、profile" class="headerlink" title="5、profile"></a>5、profile</h3><blockquote><p>多环境配制的支持。</p><p>Profile是Spring对不同环境提供不同配置功能的支持，通过激活、指定参数等方式快速切换环境。</p></blockquote><h4 id="5-1-多profile文件形式"><a href="#5-1-多profile文件形式" class="headerlink" title="5.1     多profile文件形式"></a>5.1     多profile文件形式</h4><p>在主配置文件编写时，文件名可以是 application-{profile}.properties/yml</p><p>默认使用application.properties的配置；</p><h4 id="5-2-yml多文档块方式"><a href="#5-2-yml多文档块方式" class="headerlink" title="5.2    yml多文档块方式"></a>5.2    yml多文档块方式</h4><div class="hljs"><pre><code class="hljs yml"><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8003</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span>    <span class="hljs-attr">active:</span> <span class="hljs-string">test</span><span class="hljs-meta">---</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8004</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">dev</span><span class="hljs-meta">---</span><span class="hljs-attr">server:</span>  <span class="hljs-attr">port:</span> <span class="hljs-number">8009</span><span class="hljs-attr">spring:</span>  <span class="hljs-attr">profiles:</span> <span class="hljs-string">test</span> <span class="hljs-comment"># 指定属于哪个环境</span></code></pre></div><h4 id="3-2-激活指定profile"><a href="#3-2-激活指定profile" class="headerlink" title="3.2    激活指定profile"></a>3.2    激活指定profile</h4><ul><li><p>在配置文件中指定<code>spring.profiles.active=dev</code></p></li><li><p>命令行：<code>--spring.profiles.active=dev</code></p><p>​                    <code>java -jar spring-boot-xxxx.jar  --spring.profiles.active=dev</code></p></li><li><p>虚拟机参数：<code>-Dspring.profiles.active=dev</code></p></li></ul><h3 id="6、配置文件加载位置"><a href="#6、配置文件加载位置" class="headerlink" title="6、配置文件加载位置"></a>6、配置文件加载位置</h3><p>spring boot 启动会扫描一下位置的application.properties或者application.yml文件作为spring boot的默认配置文件</p><p>-file:./config/</p><p>-file:./       当前项目的根路径下</p><p>-classpath:/config/</p><p>-classpath:/      类路径下</p><blockquote><p>按照以上优先级从高到低的顺序加载配置文件，高优先级的配置会低优先级的配置</p><p>可以通过配置<code>spring.config.location</code>来改变默认配置</p></blockquote><p>spring boot 会从这四个位置全部加载配置文件：互补配置（相同的配置内容按照优先级的高级覆盖，不同的内容互补）</p><h3 id="7、外部配置加载顺序"><a href="#7、外部配置加载顺序" class="headerlink" title="7、外部配置加载顺序"></a>7、外部配置加载顺序</h3><p><code>SpringBoot也可以从以下位置加载配置； 优先级从高到低；高优先级的配置覆盖低优先级的配置，所有的配置会形成互补配置</code></p><p><strong><code>1.命令行参数</code></strong></p><p>所有的配置都可以在命令行上进行指定</p><p>java -jar spring-boot-02-config-02-0.0.1-SNAPSHOT.jar –server.port=8087  –server.context-path=/abc</p><p>多个配置用空格分开； –配置项=值</p><p>2.来自java:comp/env的JNDI属性</p><p>3.Java系统属性（System.getProperties()）</p><p>4.操作系统环境变量</p><p>5.RandomValuePropertySource配置的random.*属性值</p><p>==<strong>由jar包外向jar包内进行寻找；</strong>==</p><p>==<strong>优先加载带profile</strong>==</p><p><strong>6.jar包外部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p><strong>7.jar包内部的application-{profile}.properties或application.yml(带spring.profile)配置文件</strong></p><p>==<strong>再来加载不带profile</strong>==</p><p><strong>8.jar包外部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p><strong>9.jar包内部的application.properties或application.yml(不带spring.profile)配置文件</strong></p><p>10.@Configuration注解类上的@PropertySource</p><p>11.通过SpringApplication.setDefaultProperties指定的默认属性</p><p>所有支持的配置加载来源；</p><h3 id="8、自动配置原理"><a href="#8、自动配置原理" class="headerlink" title="8、自动配置原理"></a>8、自动配置原理</h3><p>配置文件到底能写什么？怎么写？自动配置原理</p><p><a href="https://docs.spring.io/spring-boot/docs/2.3.0.RELEASE/reference/htmlsingle/#common-application-properties" target="_blank" rel="noopener">配置文件能配置的属性参照</a></p><p><strong>自动配置原理</strong></p><h2 id="三、SpringBoot与日志"><a href="#三、SpringBoot与日志" class="headerlink" title="三、SpringBoot与日志"></a>三、SpringBoot与日志</h2><h3 id="1、日志框架"><a href="#1、日志框架" class="headerlink" title="1、日志框架"></a>1、日志框架</h3><h3 id="2、SLF4j使用"><a href="#2、SLF4j使用" class="headerlink" title="2、SLF4j使用"></a>2、SLF4j使用</h3><h4 id="2-1-如何在系统中使用SLF4j"><a href="#2-1-如何在系统中使用SLF4j" class="headerlink" title="2.1    如何在系统中使用SLF4j"></a>2.1    如何在系统中使用SLF4j</h4><h4 id="2-2-遗留问题"><a href="#2-2-遗留问题" class="headerlink" title="2.2 遗留问题"></a>2.2 遗留问题</h4><p>不同框架使用的是不一样的日志框架</p><p>此时统一日志记录，所有框架统一起使用SLF4j进行输出</p><p><strong>如何让系统中的所有日志都统一到SLF4j;</strong></p><ol><li><p>将系统中的其他日志框架先排除出去；（不能只做排除，因为框架的底层还在使用就日志中的类）</p></li><li><p>用中间包来替换原有的日志框架</p></li><li><p>导入slf4j的实现</p></li></ol><h3 id="3、Spring-Boot-日志关系"><a href="#3、Spring-Boot-日志关系" class="headerlink" title="3、Spring Boot 日志关系"></a>3、Spring Boot 日志关系</h3><p>![springboot logging](C:\Users\wangy\Desktop\SpringBoot\img\spring boot-logging.png)</p><p>总结：</p><p>​        1)、Spring Boot底层也是使用的slf4j+logback</p><p>​        2)、spring boot  把其他日志都改成了SLF4j</p><p>​        3)、中间转换包</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@SuppressWarnings</span>(<span class="hljs-string">"rawtypes"</span>)<span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LogFactory</span> </span>&#123;    <span class="hljs-keyword">static</span> String UNSUPPORTED_OPERATION_IN_JCL_OVER_SLF4J = <span class="hljs-string">"http://www.slf4j.org/codes.html#unsupported_operation_in_jcl_over_slf4j"</span>;    <span class="hljs-keyword">static</span> LogFactory logFactory = <span class="hljs-keyword">new</span> SLF4JLogFactory();</code></pre></div><p><img src="/2020/06/04/Spring-Boot%E5%AE%8C%E6%95%B4%E7%AC%94%E8%AE%B0/C:%5CUsers%5Cwangy%5CDesktop%5CSpringBoot%5Cimg%5C%E4%B8%AD%E9%97%B4%E8%BD%AC%E6%8D%A2%E5%8C%85.png" srcset="/img/loading.gif" alt></p><p>4)、如果引入其他框架的。一定要把这个框架的默认日志依赖排除掉？</p><p>Spring 框架用的是commons-logging；</p><div class="hljs"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-core<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-logging<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h3 id="4、使用日志"><a href="#4、使用日志" class="headerlink" title="4、使用日志"></a>4、使用日志</h3><p>使用</p><div class="hljs"><pre><code class="hljs java"><span class="hljs-comment">//记录器</span>    Logger logger = LoggerFactory.getLogger(getClass());    <span class="hljs-meta">@Test</span>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">contextLoads</span><span class="hljs-params">()</span> </span>&#123;        <span class="hljs-comment">//日志级别</span>        <span class="hljs-comment">/**</span><span class="hljs-comment">         * trace&lt;debug&lt;info&lt;warn&lt;error</span><span class="hljs-comment">         * 由低到高，打印的信息越来越少</span><span class="hljs-comment">         * Spring boot 默认试用的是infO级别的</span><span class="hljs-comment">         */</span>        logger.trace(<span class="hljs-string">"这是trace日志。。。"</span>);        logger.debug(<span class="hljs-string">"这是debug日志。。。"</span>);        logger.info(<span class="hljs-string">"这是info日志。。。"</span>);        logger.warn(<span class="hljs-string">"这是warn日志。。。"</span>);        logger.error(<span class="hljs-string">"这是error日志。。"</span>);    &#125;</code></pre></div><p>日志文件可以在application.properties中配置</p><div class="hljs"><pre><code class="hljs properties"><span class="hljs-comment"># spring boot 默认的日志级别是info,我们自定义设置指定包日志的级别</span><span class="hljs-meta">logging.level.com.yang</span>=<span class="hljs-string">trace</span><span class="hljs-comment"># 设置日志的文件名,默认是在项目的根路径下</span><span class="hljs-meta">logging.file.name</span>=<span class="hljs-string">D:/myLogging</span><span class="hljs-comment"># 设置日志文件的路径</span><span class="hljs-comment"># logging.file.path</span><span class="hljs-comment"># 设置日志在控制台输出的样式</span><span class="hljs-meta">logging.pattern.console</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span><span class="hljs-comment"># 设置日志在文件中输出的样式</span><span class="hljs-meta">logging.pattern.file</span>=<span class="hljs-string">%d&#123;yyyy-MM-dd&#125; [%thread] %-5level %logger&#123;50&#125; - %msg%n</span></code></pre></div><h4 id="4-2自定义配置"><a href="#4-2自定义配置" class="headerlink" title="4.2自定义配置"></a>4.2自定义配置</h4><p>给类路径下放上每个日志框架自己的配置文件，按照指定的配置名，spring boot就不使用自己默认的配置了</p><table><thead><tr><th align="left">Logging System</th><th align="left">Customization</th></tr></thead><tbody><tr><td align="left">Logback</td><td align="left"><code>logback-spring.xml</code>, <code>logback-spring.groovy</code>, <code>logback.xml</code>, or <code>logback.groovy</code></td></tr><tr><td align="left">Log4j2</td><td align="left"><code>log4j2-spring.xml</code> or <code>log4j2.xml</code></td></tr><tr><td align="left">JDK (Java Util Logging)</td><td align="left"><code>logging.properties</code></td></tr></tbody></table><p>logback.xml: 直接就被日志框架识别了</p><p>logback-spring.xml: 日志框架就能直接加载日志配置文件了，由spring boot解析日志配置，并且可以使用spring boot的高级Profile功能</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"staging"</span>&gt;</span>    <span class="hljs-comment">&lt;!-- configuration to be enabled when the "staging" profile is active --&gt;</span>  可以指定某段配置只在某个环境下生效<span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span></code></pre></div><p>如：</p><div class="hljs"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">appender</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"stdout"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.core.ConsoleAppender"</span>&gt;</span>        <span class="hljs-comment">&lt;!--</span><span class="hljs-comment">        日志输出格式：</span><span class="hljs-comment">%d表示日期时间，</span><span class="hljs-comment">%thread表示线程名，</span><span class="hljs-comment">%-5level：级别从左显示5个字符宽度</span><span class="hljs-comment">%logger&#123;50&#125; 表示logger名字最长50个字符，否则按照句点分割。 </span><span class="hljs-comment">%msg：日志消息，</span><span class="hljs-comment">%n是换行符</span><span class="hljs-comment">        --&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">layout</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"ch.qos.logback.classic.PatternLayout"</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"dev"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ----&gt; [%thread] ---&gt; %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">springProfile</span> <span class="hljs-attr">name</span>=<span class="hljs-string">"!dev"</span>&gt;</span>                <span class="hljs-tag">&lt;<span class="hljs-name">pattern</span>&gt;</span>%d&#123;yyyy-MM-dd HH:mm:ss.SSS&#125; ==== [%thread] ==== %-5level %logger&#123;50&#125; - %msg%n<span class="hljs-tag">&lt;/<span class="hljs-name">pattern</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">springProfile</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">layout</span>&gt;</span>    <span class="hljs-tag">&lt;/<span class="hljs-name">appender</span>&gt;</span></code></pre></div><p>如果使用logback.xml作为日志框架的配置，还要使用Profile功能，就会报错</p><p><code>no applicable action for [springProfile]</code></p><h3 id="5、日志切换"><a href="#5、日志切换" class="headerlink" title="5、日志切换"></a>5、日志切换</h3><p>按照slf4j的日志适配图，进行切换。</p><h2 id="四、Spring-Boot-与Web开发"><a href="#四、Spring-Boot-与Web开发" class="headerlink" title="四、Spring Boot 与Web开发"></a>四、Spring Boot 与Web开发</h2><div class="hljs"><pre><code>### 1、使用Spring Boot</code></pre></div><p>1)    创建Spring Boot 应用，选中我们需要的模块</p><p>2）Spring Boot 已经默认将这么常见配置好了，只需要 在配置文件中配置少量的配置，就可以运行起来</p><p>3）自己编写业务</p><p><strong>自动配置原理</strong></p><p>这个场景spring Boot 帮我们配置了什么? 能不能修改？能修改哪些配置？能不能扩展？</p><div class="hljs"><pre><code class="hljs xml">xxxxxAutoConfiguration: 帮我们给容器自动配置组件xxxxxProperties: 配置类来封装配置文件的内容</code></pre></div><h3 id="2、SpringBoot对静态资源的映射规则"><a href="#2、SpringBoot对静态资源的映射规则" class="headerlink" title="2、SpringBoot对静态资源的映射规则"></a>2、SpringBoot对静态资源的映射规则</h3><p><strong>1）所有/webjars/</strong> ，都去classpath:/META-INF/resources/webjars/找资源**</p><p>可以 ctrl+shift +t 去WebMvcAutoConfiguration类下查看</p><p><code>webjars: 以jar包的方式引入静态资源</code></p><p>在webjars 官网找到项目需要的依赖，在pom文件中引入</p><p><img src="/2020/06/04/Spring-Boot%E5%AE%8C%E6%95%B4%E7%AC%94%E8%AE%B0/C:%5CUsers%5Cwangy%5CDesktop%5CSpringBoot%5Cimg%5Cjuqery-jar.png" srcset="/img/loading.gif" alt></p><p>访问路径 <a href="http://localhost:8080/webjars/jquery/3.5.1/jquery.js" target="_blank" rel="noopener">http://localhost:8080/webjars/jquery/3.5.1/jquery.js</a></p><div class="hljs"><pre><code class="hljs XML"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.webjars<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>jquery<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.5.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span>            <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><p><strong>2）”/“ 访问当前项目的任何资源，（静态文件的文件夹）</strong></p><div class="hljs"><pre><code class="hljs xml">“classpath：/META-INF/resources/”"calsspath：/rescources/""classpath：/static/""classpath: /public/""/": 当前项目的根路径</code></pre></div><p>导入准备好的静态资源到static文件夹下 clean一下就可以访问到<a href="http://localhost:8080/asserts/js/Chart.min.js" target="_blank" rel="noopener">http://localhost:8080/asserts/js/Chart.min.js</a></p><p><strong>3）欢迎页：静态资源文件下的所有index.htm，被”/</strong>“ 映射**</p><p><code>localhost:8080/ 找index页面</code></p><p><strong>4) 所有的**</strong>/favicon.ico 都在静态资源文件下找**</p><p>没有出现图标执行 Ctrl + f5 刷新浏览器页面就出现了</p><h3 id="3、模板引擎"><a href="#3、模板引擎" class="headerlink" title="3、模板引擎"></a>3、模板引擎</h3><p><img src="/2020/06/04/Spring-Boot%E5%AE%8C%E6%95%B4%E7%AC%94%E8%AE%B0/C:%5CUsers%5Cwangy%5CDesktop%5CSpringBoot%5Cimg%5C%E6%A8%A1%E6%9D%BF%E5%BC%95%E6%93%8E.png" srcset="/img/loading.gif" alt></p><p>Spring Boot 推荐 thymeleaf</p><h4 id="3-1-引入thymeleaf"><a href="#3-1-引入thymeleaf" class="headerlink" title="3.1    引入thymeleaf"></a>3.1    引入thymeleaf</h4><div class="hljs"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--引入thymeleaf--&gt;</span>        <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span>            <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span>        <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span></code></pre></div><h4 id="3-2-Thymeleaf-使用"><a href="#3-2-Thymeleaf-使用" class="headerlink" title="3.2    Thymeleaf 使用"></a>3.2    Thymeleaf 使用</h4><blockquote><p>只需要将HTML页面放在classpath:/templates/，thymeleaf就能自动渲染</p></blockquote><p>使用：</p><h5 id="1、导入thymeleaf的名称空间"><a href="#1、导入thymeleaf的名称空间" class="headerlink" title="1、导入thymeleaf的名称空间"></a>1、导入thymeleaf的名称空间</h5><div class="hljs"><pre><code class="hljs html">xmlns:th="http://www.thymeleaf.org"</code></pre></div><h5 id="2、使用thymeleaf语法；"><a href="#2、使用thymeleaf语法；" class="headerlink" title="2、使用thymeleaf语法；"></a>2、使用thymeleaf语法；</h5><div class="hljs"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-meta-keyword">html</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"en"</span> <span class="hljs-attr">xmlns:th</span>=<span class="hljs-string">"http://www.thymeleaf.org"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"UTF-8"</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">h2</span>&gt;</span>使用thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">h2</span>&gt;</span>    <span class="hljs-comment">&lt;!--th:text将div中的内容设置为java代码绑定的数据--&gt;</span>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">th:text</span>=<span class="hljs-string">"$&#123;hello&#125;"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></code></pre></div><h5 id="3、语法规则"><a href="#3、语法规则" class="headerlink" title="3、语法规则"></a>3、语法规则</h5><p>1）、th:text    改变元素中的内容</p><p><code>使用th:html任意属性来替换原生属性的值</code></p><h5 id="2）、表达式"><a href="#2）、表达式" class="headerlink" title="2）、表达式"></a>2）、表达式</h5><table><thead><tr><th align="center">语法</th><th align="center">名称</th><th align="center">描述</th><th align="center">作用</th></tr></thead><tbody><tr><td align="center">${…}</td><td align="center">Variable Expressions</td><td align="center">变量表达式</td><td align="center">取出上下文变量的值</td></tr><tr><td align="center">*{…}</td><td align="center">Selection Variable Expressions</td><td align="center">选择变量表达式</td><td align="center">取出选择的对象的属性值</td></tr><tr><td align="center">#{…}</td><td align="center">Message Expressions</td><td align="center">消息表达式</td><td align="center">使文字消息国际化，I18N</td></tr><tr><td align="center">@{…}</td><td align="center">Link URL Expressions</td><td align="center">链接表达式</td><td align="center">用于表示各种超链接地址</td></tr><tr><td align="center">~{…}</td><td align="center">Fragment Expressions</td><td align="center">片段表达式</td><td align="center">引用一段公共的代码片段</td></tr></tbody></table><h3 id="4-Spring-MVC的自动配置"><a href="#4-Spring-MVC的自动配置" class="headerlink" title="4.Spring MVC的自动配置"></a>4.Spring MVC的自动配置</h3><h4 id="1-Spring-MVC-auto-configuration"><a href="#1-Spring-MVC-auto-configuration" class="headerlink" title="1. Spring MVC auto-configuration"></a>1. Spring MVC auto-configuration</h4><p>Spring Boot 自动配置好了SpringMVC</p><p>以下是SpringBoot对SpringMVC的默认配置:<strong>==（WebMvcAutoConfiguration）==</strong></p><ul><li><p>Inclusion of <code>ContentNegotiatingViewResolver</code> and <code>BeanNameViewResolver</code> beans.</p><ul><li>自动配置了ViewResolver（视图解析器：根据方法的返回值得到视图对象（View），视图对象决定如何渲染（转发？重定向？））</li><li>ContentNegotiatingViewResolver：组合所有的视图解析器的；</li><li>==如何定制：我们可以自己给容器中添加一个视图解析器；自动的将其组合进来；==</li></ul></li><li><p>Support for serving static resources, including support for WebJars (see below).静态资源文件夹路径,webjars</p></li><li><p>Static <code>index.html</code> support. 静态首页访问</p></li><li><p>Custom <code>Favicon</code> support (see below).  favicon.ico</p></li></ul><ul><li><p>自动注册了 of <code>Converter</code>, <code>GenericConverter</code>, <code>Formatter</code> beans.</p><ul><li>Converter：转换器；  public String hello(User user)：类型转换使用Converter</li><li><code>Formatter</code>  格式化器；  2017.12.17===Date；</li></ul></li></ul><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@Bean</span><span class="hljs-meta">@ConditionalOnProperty</span>(prefix = <span class="hljs-string">"spring.mvc"</span>, name = <span class="hljs-string">"date-format"</span>)<span class="hljs-comment">//在文件中配置日期格式化的规则</span><span class="hljs-function"><span class="hljs-keyword">public</span> Formatter&lt;Date&gt; <span class="hljs-title">dateFormatter</span><span class="hljs-params">()</span> </span>&#123;<span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> DateFormatter(<span class="hljs-keyword">this</span>.mvcProperties.getDateFormat());<span class="hljs-comment">//日期格式化组件</span>&#125;</code></pre></div><p>​    ==自己添加的格式化器转换器，我们只需要放在容器中即可==</p><ul><li><p>Support for <code>HttpMessageConverters</code> (see below).</p><ul><li><p>HttpMessageConverter：SpringMVC用来转换Http请求和响应的；User—Json；</p></li><li><p><code>HttpMessageConverters</code> 是从容器中确定；获取所有的HttpMessageConverter；</p><p>==自己给容器中添加HttpMessageConverter，只需要将自己的组件注册容器中（@Bean,@Component）==</p></li></ul></li></ul><ul><li><p>Automatic registration of <code>MessageCodesResolver</code> (see below).定义错误代码生成规则</p></li><li><p>Automatic use of a <code>ConfigurableWebBindingInitializer</code> bean (see below).</p><p>==我们可以配置一个ConfigurableWebBindingInitializer来替换默认的；（添加到容器）==</p><div class="hljs"><pre><code class="hljs diff">初始化WebDataBinder；请求数据<span class="hljs-comment">=====JavaBean；</span></code></pre></div></li></ul><p><strong>org.springframework.boot.autoconfigure.web：web的所有自动场景；</strong></p><p>If you want to keep Spring Boot MVC features, and you just want to add additional <a href="https://docs.spring.io/spring/docs/4.3.14.RELEASE/spring-framework-reference/htmlsingle#mvc" target="_blank" rel="noopener">MVC configuration</a> (interceptors, formatters, view controllers etc.) you can add your own <code>@Configuration</code> class of type <code>WebMvcConfigurerAdapter</code>, but <strong>without</strong> <code>@EnableWebMvc</code>. If you wish to provide custom instances of <code>RequestMappingHandlerMapping</code>, <code>RequestMappingHandlerAdapter</code> or <code>ExceptionHandlerExceptionResolver</code> you can declare a <code>WebMvcRegistrationsAdapter</code> instance providing such components.</p><p>If you want to take complete control of Spring MVC, you can add your own <code>@Configuration</code> annotated with <code>@EnableWebMvc</code>.</p><h3 id="5、如何修改SpringBoot的默认配置"><a href="#5、如何修改SpringBoot的默认配置" class="headerlink" title="5、如何修改SpringBoot的默认配置"></a>5、如何修改SpringBoot的默认配置</h3><p>只需要把要修改的配置添加到容器中，就能被spring boot 使用到</p><p>模式：</p><p>1）Sprig Boot 在自动配置很多组件的时候，先看容器中有没有用户配置的（@Bean、@Component）如果有就使用用户配置的，没有，才自动配置；有些 组件还可以有多个（比如viewResolver）将用户的配置和自己的默认配置组合起来。</p>]]></content>
    
    
    
    <tags>
      
      <tag>整理了Spring Boot的核心部分笔记和Spring Boot 整合其他框架的笔记</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>项目一实战思路</title>
    <link href="/2020/05/31/%E9%A1%B9%E7%9B%AE%E4%B8%80%E5%AE%9E%E6%88%98%E6%80%9D%E8%B7%AF/"/>
    <url>/2020/05/31/%E9%A1%B9%E7%9B%AE%E4%B8%80%E5%AE%9E%E6%88%98%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="项目一实战总结"><a href="#项目一实战总结" class="headerlink" title="项目一实战总结"></a>项目一实战总结</h1><h2 id="会员统计"><a href="#会员统计" class="headerlink" title="会员统计"></a>会员统计</h2><p>设计年龄段，0-6岁为婴儿，7-12岁为少儿，13-17岁为青少年，18-45岁为青年、46-69岁为中年、&gt;69岁为老年，为达到一目了然各个年龄段的人数高低，选择柱状图展示。</p><blockquote><p><strong>心得</strong></p><p>使用ECharts很容易达到效果，使用时我们不需要关系样式怎么设置，直接去<a href="https://echarts.apache.org/examples/zh/index.html" target="_blank" rel="noopener">ECharts官网</a>找到合适的案例，粘贴到页面上即可。重要的是根据案例中的数据，构造出合适的数据模型动态的赋值。</p></blockquote><h4 id="前端调用实现"><a href="#前端调用实现" class="headerlink" title="前端调用实现"></a>前端调用实现</h4><div class="hljs"><pre><code class="hljs javascript"><span class="hljs-comment">// 基于准备好的dom，初始化echarts实例</span>        <span class="hljs-keyword">var</span> myChart1 = echarts.init(<span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'chart1'</span>));        axios.get(<span class="hljs-string">"/report/getMemberAgeReport.do"</span>).then(<span class="hljs-function">(<span class="hljs-params">res</span>)=&gt;</span>&#123;            <span class="hljs-comment">// 指定图表的配置项和数据</span>            myChart1.setOption(                &#123;                    title: &#123;                        text: <span class="hljs-string">'会员年龄分布统计'</span>                    &#125;,                    tooltip: &#123;&#125;,                    legend: &#123;                        data:[<span class="hljs-string">'年龄段人数'</span>]                    &#125;,                    xAxis: &#123;                        data: res.data.data.ageStages                    &#125;,                    yAxis: &#123;&#125;,                    series: [&#123;                        name: <span class="hljs-string">'年龄段人数'</span>,                        type: <span class="hljs-string">'bar'</span>,                        data: res.data.data.ageCountNum                    &#125;]                &#125;                );        &#125;);</code></pre></div><h4 id="后台逻辑"><a href="#后台逻辑" class="headerlink" title="后台逻辑"></a>后台逻辑</h4><div class="hljs"><pre><code class="hljs java"><span class="hljs-meta">@RequestMapping</span>(<span class="hljs-string">"/getMemberAgeReport"</span>)    <span class="hljs-function"><span class="hljs-keyword">public</span> Result <span class="hljs-title">getMemberAgeReport</span><span class="hljs-params">()</span> </span>&#123;        List&lt;Map&lt;String,Object&gt;&gt; ageStagesMapList = memberService.findMemberCountByBirthdy();        Map&lt;String, Object&gt; data = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();        List&lt;String&gt; ageStages = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();               <span class="hljs-comment">//纵坐标数据,统计每个年龄段的人数</span>        List&lt;Long&gt; ageCountNum = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();        <span class="hljs-keyword">if</span>(ageStagesMapList != <span class="hljs-keyword">null</span>)&#123;            <span class="hljs-keyword">for</span> (Map&lt;String, Object&gt; stringObjectMap : ageStagesMapList) &#123;                <span class="hljs-comment">//拿到map集合&#123;name=青少年, num=12&#125;</span>                String str = (String) stringObjectMap.get(<span class="hljs-string">"name"</span>);                <span class="hljs-comment">//年龄段表示字段 x</span>                ageStages.add(str);                Long value = (Long) stringObjectMap.get(<span class="hljs-string">"num"</span>);                <span class="hljs-comment">//年龄段的值 y</span>                ageCountNum.add(value);            &#125;            <span class="hljs-comment">//将横纵坐标的list 接入map 集合</span>            data.put(<span class="hljs-string">"ageStages"</span>, ageStages);            data.put(<span class="hljs-string">"ageCountNum"</span>,ageCountNum);            <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">true</span>, <span class="hljs-string">"查询成功"</span>, data);        &#125;        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Result(<span class="hljs-keyword">false</span>, <span class="hljs-string">"查询失败"</span>);    &#125;</code></pre></div><div class="hljs"><pre><code>#### SQL</code></pre></div><div class="hljs"><pre><code class="hljs mysql">&lt;select id&#x3D;&quot;findMemberCountByBirthdy&quot; resultType&#x3D;&quot;map&quot;&gt;        SELECT t.name,COUNT(1) as num FROM (SELECT  CASE        WHEN  ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&gt; 0 AND ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&lt;  6  THEN &#39;婴幼儿&#39;        WHEN  ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&gt;&#x3D;7 AND ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&lt;   12  THEN &#39;少儿&#39;        WHEN  ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&gt;&#x3D;13 AND ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&lt;   17  THEN &#39;青少年&#39;        WHEN  ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&gt;&#x3D;18 AND ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&lt;   45  THEN &#39;青年&#39;        WHEN  ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&gt;&#x3D;46 AND ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&lt;   69  THEN &#39;中年&#39;        WHEN  ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&gt;&#x3D;79 AND ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&lt;   89  THEN &#39;老年&#39;        WHEN  ROUND(DATEDIFF(CURDATE(), birthday)&#x2F;365.2422)&gt;&#x3D;90 THEN &#39;90以上&#39;        ELSE &#39;未知&#39; END as name FROM t_member) as t GROUP BY t.name;    &lt;&#x2F;select&gt;</code></pre></div><blockquote><p><img src="http://www.qfeng.online/imgs/test-02.PNG" srcset="/img/loading.gif" alt><strong>SQL分析</strong></p><p>年龄采取四舍五入的方式，如出生日期2018-08-02，如果今天是2018-09-01差一天满，将处理为1岁显示。</p><p>如果不需要四舍五入则使用： <code>TIMESTAMPDIFF(YEAR, @birthday, CURDATE())</code></p><p>round():     函数 用于四舍五入。</p><p>DATEDIFF()：返回两个日期之间的天数。</p><p>CURDATE() 函数返回当前的日期。</p><p>注意大于号和小于号在mybatis 中转义，不转义会和标签的 &lt;&gt;混淆。</p></blockquote><blockquote><p>​    需要分析的sql</p><p>统计会员年龄分布sql ： findMemberCountByBirthdy</p></blockquote><div class="hljs"><pre><code class="hljs md">&#123;% note success %&#125;文字 或者 <span class="hljs-code">`markdown`</span> 均可&#123;% endnote %&#125;</code></pre></div><p><a href="http://www.qfeng.online/imgs/test-02.PNG" target="_blank" rel="noopener">http://www.qfeng.online/imgs/test-02.PNG</a></p><p class="class note-success">法发大水发生发放</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2020/05/29/hello-world/"/>
    <url>/2020/05/29/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="hljs"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">"My New Post"</span></code></pre></div><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="hljs"><pre><code class="hljs bash">$ hexo server</code></pre></div><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="hljs"><pre><code class="hljs bash">$ hexo generate</code></pre></div><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="hljs"><pre><code class="hljs bash">$ hexo deploy</code></pre></div><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
